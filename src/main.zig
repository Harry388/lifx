const std = @import("std");
const root = @import("root.zig");

const ArgError = error{ NoActionProvided, MalformedAction };

// Off
const off_msg = [_]u8{ 0x31, 0x00, 0x00, 0x14, 0x02, 0x00, 0x00, 0x00, 0xd0, 0x73, 0xd5, 0x30, 0x34, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x0c, 0xc8, 0x00, 0x00, 0x00 };

// On
const on_msg = [_]u8{ 0x31, 0x00, 0x00, 0x14, 0x02, 0x00, 0x00, 0x00, 0xd0, 0x73, 0xd5, 0x30, 0x34, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xa8, 0x0c, 0xc8, 0x00, 0x00, 0x00 };

pub fn main() !void {
    var args = std.process.args();
    const cont = args.skip();
    if (!cont) unreachable;
    const action = args.next() orelse return ArgError.NoActionProvided;
    if (!((action.len == 2) or (action.len == 3))) return ArgError.MalformedAction;
    const msg = if ((action.len == 2) and (action[0] == 'o') and (action[1] == 'n'))
        on_msg
    else if ((action.len == 3) and (action[0] == 'o') and (action[1] == 'f') and (action[2] == 'f'))
        off_msg
    else
        return ArgError.MalformedAction;
    try toggleLight(msg[0..]);
}

fn toggleLight(msg: []const u8) !void {
    const client = try root.Client.init("192.168.1.252", 56700);
    try client.connect();
    const msg_size = try client.send(msg);
    std.debug.print("Sent {}\n", .{msg_size});
}
